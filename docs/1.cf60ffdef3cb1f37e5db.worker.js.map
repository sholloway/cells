{"version":3,"sources":["webpack://Conways/webpack/bootstrap","webpack://Conways/./src/lib/templates/DrawingTemplate.js","webpack://Conways/./src/lib/entity-system/Entities.js","webpack://Conways/./src/lib/workers/WorkerCommands.js","webpack://Conways/./src/lib/workers/DrawingSystem.worker.js","webpack://Conways/./src/lib/workers/DrawingSystemWorkerController.js","webpack://Conways/./src/lib/workers/AbstractWorkerController.js","webpack://Conways/./src/lib/entity-system/CellStates.js","webpack://Conways/./src/lib/core/DrawingSystem.js","webpack://Conways/./src/lib/core/DrawingStateManager.js","webpack://Conways/./src/lib/core/CellMortonStore.js","webpack://Conways/./src/lib/core/SceneManager.js","webpack://Conways/./src/lib/templates/TemplateFactory.js","webpack://Conways/./src/lib/templates/ConwayMemorial.js","webpack://Conways/./src/lib/templates/Block.js","webpack://Conways/./src/lib/templates/HorizontalSpinner.js","webpack://Conways/./src/lib/templates/VerticalSpinner.js","webpack://Conways/./src/lib/templates/Toad.js","webpack://Conways/./src/lib/templates/Glider.js","webpack://Conways/./src/lib/templates/LightSpaceShip.js","webpack://Conways/./src/lib/templates/automata/LinearCellularAutomaton.js","webpack://Conways/./src/lib/templates/RandomDiceRoll.js","webpack://Conways/./src/lib/app/AppLayers.js","webpack://Conways/./src/lib/workers/WorkerUtils.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA,OAAO,OAAO,GAAG,mBAAO,CAAC,CAA8B;;AAEvD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ,GAAG;AACH;AACA;AACA;;AAEA;;;;;;;ACzCA;AACA;AACA;AACA;;AAEA,mBAAmB,mBAAO,CAAC,CAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClPA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,EAAE;AACF;AACA;;;;;;;AC7CA;AACA;AACA;;AAEA,sCAAsC,mBAAO,CAAC,CAAoC;;AAElF,OAAO,yBAAyB,GAAG,mBAAO,CAAC,EAAkB;;AAE7D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACvBA;AACA;AACA;AACA,CAAC,GAAG,mBAAO,CAAC,CAA+B;AAC3C,sBAAsB,mBAAO,CAAC,CAA4B;AAC1D,uBAAuB,mBAAO,CAAC,CAAqB;AACpD,eAAe,mBAAO,CAAC,EAAuB;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,YAAY;AACxC;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACpJA,uBAAuB,mBAAO,CAAC,CAAqB;AACpD;AACA,OAAO,OAAO,GAAG,mBAAO,CAAC,CAAgC;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA,OAAO,sBAAsB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd,YAAY,OAAO;AACnB,YAAY,SAAS;AACrB,YAAY,SAAS;AACrB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA,GAAG;AACH,iDAAiD,YAAY,IAAI,OAAO;AACxE;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,QAAQ;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAU,YAAY;AACtB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,UAAU,OAAO;AACjB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;;;;;;AC7KlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACTA,4BAA4B,mBAAO,CAAC,CAA0B;AAC9D,qBAAqB,mBAAO,CAAC,EAAmB;AAChD,wBAAwB,mBAAO,CAAC,EAAmC;AACnE,OAAO,OAAO,GAAG,mBAAO,CAAC,CAAgC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;;AAEA;AACA,cAAc,oBAAoB;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACtIA,OAAO,kBAAkB,GAAG,mBAAO,CAAC,CAAsB;AAC1D,OAAO,OAAO,GAAG,mBAAO,CAAC,CAA8B;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,aAAa;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;AClEA;AACA;AACA,aAAa;AACb,iCAAiC;AACjC,iCAAiC;AACjC,iCAAiC;AACjC,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;AAC5C,8CAA8C;AAC9C,8CAA8C;AAC9C,8CAA8C;AAC9C,6CAA6C;AAC7C;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB,cAAc;AACpC,yBAAyB,YAAY;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;;;;;;AC5GlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,kBAAkB;AAC9B,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACzDA,uBAAuB,mBAAO,CAAC,EAAqB;AACpD,cAAc,mBAAO,CAAC,EAAY;AAClC,0BAA0B,mBAAO,CAAC,EAAwB;AAC1D,wBAAwB,mBAAO,CAAC,EAAsB;AACtD,aAAa,mBAAO,CAAC,EAAW;AAChC,eAAe,mBAAO,CAAC,EAAa;AACpC,uBAAuB,mBAAO,CAAC,EAAqB;AACpD,gCAAgC,mBAAO,CAAC,EAAuC;AAC/E,uBAAuB,mBAAO,CAAC,EAAqB;;AAEpD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACrEA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;;;;;;;AC3BA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACfA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACZA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACjBA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACfA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACZA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACbA,wBAAwB,mBAAO,CAAC,CAAuB;;AAEvD;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,YAAY,SAAS;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACjJA,wBAAwB,mBAAO,CAAC,CAAsB;;AAEtD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA,oBAAoB,aAAa;AACjC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;;;;;;;ACJA;AACA;AACA;;AAEA,kBAAkB","file":"1.cf60ffdef3cb1f37e5db.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","const { Cell } = require('../entity-system/Entities.js');\n\nclass DrawingTemplate {\n\tconstructor() {}\n\n\tgenerateCells(x, y) {\n\t\tlet cells = this.makeCellsFrom2DArray(this.pattern());\n\t\tlet patternOrigin = this.origin();\n\t\tlet shift = {\n\t\t\tx: x + patternOrigin.x,\n\t\t\ty: y + patternOrigin.y,\n\t\t};\n\n\t\tcells.forEach((c) => {\n\t\t\tc.row += shift.x;\n\t\t\tc.col += shift.y;\n\t\t});\n\t\treturn cells;\n\t}\n\n\tpattern() {\n\t\tthrow new Error('Children of DrawingTemplate must implement pattern().');\n\t}\n\n\torigin() {\n\t\treturn { x: 0, y: 0 };\n\t}\n\n\tmakeCellsFrom2DArray(grid) {\n\t\tlet cells = [];\n\t\tgrid.forEach((row, rowIndex) => {\n\t\t\trow.forEach((value, colIndex) => {\n\t\t\t\tif (value == 1) {\n\t\t\t\t\tcells.push(new Cell(colIndex, rowIndex, 1));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn cells;\n\t}\n}\n\nmodule.exports = DrawingTemplate;\n","/**\n * A module for defining render-able entities with traits.\n * @module entity_system\n */\n\nconst CellStates = require('./CellStates.js');\n\n/**\n * A render-able entity. The entity is defined by registering traits.\n */\nclass Entity {\n\t/**\n\t * Create a new Entity.\n\t */\n\tconstructor() {\n\t\tthis.traits = [];\n\t\tthis.className = 'Entity';\n\t}\n\n\t/**\n\t * Process all register traits.\n\t * @param {HTMLCanvasContext} rendererContext\n\t */\n\trender(rendererContext) {\n\t\tlet context = {\n\t\t\trendererContext: rendererContext,\n\t\t\tentity: this,\n\t\t};\n\t\tthis.traits.forEach((trait) => {\n\t\t\ttrait.process(context);\n\t\t});\n\t}\n\n\t/**\n\t * Expands the definition of the entity by registering traits.\n\t * @param {Trait} trait - An implementation of the Trait abstract class.\n\t */\n\tregister(trait) {\n\t\tthis.traits.push(trait);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Automatically called by JSON.stringify().\n\t * Injects the original class name as a property when serialized\n\t * which an be used to rebuild a Scene after communicated from a thread.\n\t * @returns Entity\n\t */\n\ttoJSON() {\n\t\tthis.className = this.constructor.name;\n\t\treturn this;\n\t}\n\n\tcopyParams(original) {\n\t\tfor (var key in original) {\n\t\t\tif (key != 'className' && key != 'traits') {\n\t\t\t\tthis[key] = original[key];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tinitTraits(original, traitBuilderFactory) {\n\t\tthis.traits = original.traits.map((traitLit) => {\n\t\t\tvar traitBuilder = traitBuilderFactory(traitLit.className);\n\t\t\treturn traitBuilder ? traitBuilder(traitLit) : new Trait();\n\t\t});\n\t\treturn this;\n\t}\n}\n\nclass EntityBatch extends Entity {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.entities = [];\n\t}\n\n\tadd(entity) {\n\t\tif (entity && Array.isArray(entity) && entity.length > 0) {\n\t\t\tthis.entities = this.entities.concat(entity);\n\t\t} else {\n\t\t\tentity && this.entities.push(entity);\n\t\t}\n\t\treturn this;\n\t}\n}\n\nclass EntityBatchArrayBuffer extends Entity {\n\tconstructor(buffer, offset, numberOfEntities, entityFieldsCount) {\n\t\tsuper();\n\t\tthis.buffer = buffer;\n\t\tthis.initialOffset = offset;\n\t\tthis.bufferEnd = offset + numberOfEntities * entityFieldsCount;\n\t\tthis.numberOfEntities = numberOfEntities;\n\t\tthis.entityFieldsCount = entityFieldsCount;\n\t}\n}\n\nconst CELL_WIDTH = 1;\nconst CELL_HEIGHT = 1;\n\n/**\n * Represents a single unit on an abstract 2D grid.\n *\n * The width and height of the cell are the equal.\n * The grid is uniform.\n * @extends Entity\n */\nclass Cell extends Entity {\n\t/**\n\t * Create a new cell.\n\t * @param {number} row - The horizontal location of the cell on a grid.\n\t * @param {number} col - The vertical location of the cell on a grid.\n\t */\n\tconstructor(row, col, state = CellStates.ACTIVE) {\n\t\tsuper();\n\t\tthis.className = 'Cell';\n\t\tthis.row = row;\n\t\tthis.col = col;\n\t\tthis.state = state;\n\t}\n\n\t/**\n\t * Intersection Test. Is the cell inside of a provided rectangle.\n\t * @param {number} x\n\t * @param {number} y\n\t * @param {number} xx\n\t * @param {number} yy\n\t * @returns {boolean}\n\t */\n\tisInsideRect(x, y, xx, yy) {\n\t\treturn x <= this.row && this.row <= xx && y <= this.col && this.col <= yy;\n\t}\n\n\t/**\n\t * Create a deep copy of the cell.\n\t * @returns {Cell}\n\t */\n\tclone() {\n\t\treturn new Cell(this.row, this.col);\n\t}\n\n\trightBoundary() {\n\t\treturn this.row + CELL_WIDTH;\n\t}\n\n\tlowerBoundary() {\n\t\treturn this.col + CELL_HEIGHT;\n\t}\n\n\tstatic buildInstance(params) {\n\t\treturn new Cell().copyParams(params);\n\t}\n\n\tstatic mergeObjsWithCells(cells, objs) {\n\t\tobjs.forEach((obj) => {\n\t\t\t//Don't include any boxes.\n\t\t\tif (\n\t\t\t\tobj.className === 'Cell' &&\n\t\t\t\t!cells.some((c) => c.row == obj.row && c.col == obj.col)\n\t\t\t) {\n\t\t\t\tcells.push(this.buildInstance(obj));\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass DeadCell extends Cell {\n\tconstructor(row, col) {\n\t\tsuper(row, col);\n\t}\n\n\tgetState() {\n\t\treturn CellStates.DEAD;\n\t}\n}\n\n/**\n * A grid.\n */\nclass GridEntity extends Entity {\n\t/**\n\t * Creates a new grid entity\n\t * @param {number} width - The total width of the grid.\n\t * @param {number} height - The total height of the grid.\n\t * @param {number} cWidth - The width of a grid cell.\n\t * @param {number} cHeight - The height of a grid cell.\n\t */\n\tconstructor(width = null, height = null, cWidth = null, cHeight = null) {\n\t\tsuper();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.cell = { width: cWidth, height: cHeight };\n\t\tthis.className = 'GridEntity';\n\t}\n\n\tstatic buildInstance(params, traitBuilderMap = null) {\n\t\tlet entity = new GridEntity().copyParams(params);\n\t\ttraitBuilderMap && entity.initTraits(params, traitBuilderMap);\n\t\treturn entity;\n\t}\n}\n\n/**\n * Represents a box that can be processed via Traits.\n */\nclass Box extends Entity {\n\t/**\n\t * Creates a new Box.\n\t * @param {number} x - Left most X coordinate.\n\t * @param {number} y - Upper most Y coordinate.\n\t * @param {number} xx - Right most X coordinate.\n\t * @param {number} yy - Lower most Y coordinate.\n\t * @param {boolean} alive - If the cell is alive or not.\n\t */\n\tconstructor(x = null, y = null, xx = null, yy = null, alive = null) {\n\t\tsuper();\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.xx = xx;\n\t\tthis.yy = yy;\n\t\tthis.alive = alive;\n\t\tthis.className = 'Box';\n\t}\n\n\tstatic buildInstance(params, traitBuilderMap = null) {\n\t\tlet box = new Box().copyParams(params);\n\t\ttraitBuilderMap && box.initTraits(params, traitBuilderMap);\n\t\treturn box;\n\t}\n}\n\nmodule.exports = {\n\tBox,\n\tCell,\n\tDeadCell,\n\tEntity,\n\tEntityBatch,\n\tEntityBatchArrayBuffer,\n\tGridEntity,\n\tCELL_HEIGHT,\n\tCELL_WIDTH,\n};\n","const handler = {\n\tget: function (obj, prop) {\n\t\treturn prop in obj ? obj[prop] : 'Undefined Command';\n\t},\n};\n\nmodule.exports = new Proxy(\n\t{\n\t\tLifeCycle: new Proxy(\n\t\t\t{\n\t\t\t\tSTART: 'START',\n\t\t\t\tSTOP: 'STOP',\n\t\t\t\tPAUSE: 'PAUSE',\n\t\t\t\tPROCESS_CYCLE: 'PROCESS_CYCLE',\n\t\t\t},\n\t\t\thandler\n\t\t),\n\t\tDrawingSystemCommands: new Proxy(\n\t\t\t{\n\t\t\t\tSET_CELLS: 'SET_CELLS',\n\t\t\t\tSET_CELL_SIZE: 'SET_CELL_SIZE',\n\t\t\t\tSEND_CELLS: 'SEND_CELLS',\n\t\t\t\tRESET: 'RESET',\n\t\t\t\tTOGGLE_CELL: 'TOGGLE_CELL',\n\t\t\t\tDISPLAY_STORAGE: 'DISPLAY_STORAGE',\n\t\t\t\tDRAW_TEMPLATE: 'DRAW_TEMPLATE',\n\t\t\t\tDRAW_LINEAR_ELEMENTRY_CA: 'DRAW_LINEAR_ELEMENTRY_CA',\n\t\t\t},\n\t\t\thandler\n\t\t),\n\t\tLifeSystemCommands: new Proxy(\n\t\t\t{\n\t\t\t\tDISPLAY_STORAGE: 'DISPLAY_STORAGE',\n\t\t\t\tRESET: 'RESET',\n\t\t\t\tSEND_ALIVE_CELLS_COUNT: 'SEND_ALIVE_CELLS_COUNT',\n\t\t\t\tSEND_CELLS: 'SEND_CELLS',\n\t\t\t\tSEND_SIMULATION_ITERATIONS_COUNT: 'SEND_SIMULATION_ITERATIONS_COUNT',\n\t\t\t\tSET_CELL_SIZE: 'SET_CELL_SIZE',\n\t\t\t\tSET_CONFIG: 'SET_CONFIG',\n\t\t\t\tSET_SEEDER: 'SET_SEEDER',\n\t\t\t},\n\t\t\thandler\n\t\t),\n\t},\n\thandler\n);\n","/**\n * A web worker that is responsible for the drawing system.\n */\n\nconst DrawingSystemWorkerController = require('./DrawingSystemWorkerController.js');\n\nconst { establishWorkerContext } = require('./WorkerUtils.js');\n\nlet controller = new DrawingSystemWorkerController(establishWorkerContext());\n\nfunction getController() {\n\treturn controller;\n}\n\nonmessage = function (event) {\n\tevent && event.data && controller.process(event.data);\n};\n\n// These are to enable unit tests. Do not invoke directly.\nmodule.exports = {\n\tonmessage,\n\testablishWorkerContext,\n\tgetController,\n};\n","const {\n\tAbstractWorkerController,\n\tPackingConstants,\n} = require('./AbstractWorkerController.js');\nconst DrawingSystem = require('./../core/DrawingSystem.js');\nconst WorkerCommands = require('./WorkerCommands.js');\nconst Layers = require('./../app/AppLayers.js');\nconst DrawingSystemCommands = WorkerCommands.DrawingSystemCommands;\n\n/**\n * Controller for the Drawing System web worker.\n * @extends AbstractWorkerController\n */\nclass DrawingSystemWorkerController extends AbstractWorkerController {\n\t/**\n\t * Creates a new instance of a DrawingSystemWorkerController.\n\t * @param {WorkerGlobalScope} worker\n\t */\n\tconstructor(worker) {\n\t\tsuper(worker);\n\t\tthis.drawingSystem = new DrawingSystem();\n\t}\n\n\t/**\n\t * Route the inbound command to the appropriate processor.\n\t * @param {*} msg The message to be routed.\n\t * @override\n\t */\n\trouteCommand(msg) {\n\t\tswitch (msg.command) {\n\t\t\tcase DrawingSystemCommands.SET_CELLS:\n\t\t\t\tthis.processCmd(\n\t\t\t\t\tmsg,\n\t\t\t\t\tDrawingSystemCommands.SET_CELLS,\n\t\t\t\t\t(msg) => msg.cells && msg.numberOfCells,\n\t\t\t\t\t(msg) => {\n\t\t\t\t\t\tlet cells = this.unpackCells(\n\t\t\t\t\t\t\tmsg.cells,\n\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\tmsg.numberOfCells,\n\t\t\t\t\t\t\tPackingConstants.FIELDS_PER_CELL\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis.drawingSystem.setCells(cells);\n\t\t\t\t\t},\n\t\t\t\t\t'The cells or numberOfCells were not provided.'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase DrawingSystemCommands.SET_CELL_SIZE:\n\t\t\t\tthis.processCmd(\n\t\t\t\t\tmsg,\n\t\t\t\t\tDrawingSystemCommands.SET_CELL_SIZE,\n\t\t\t\t\t(msg) => msg.cellSize,\n\t\t\t\t\t(msg) => this.drawingSystem.setCellSize(msg.cellSize),\n\t\t\t\t\t'The cell size was not provided.'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase DrawingSystemCommands.RESET:\n\t\t\t\tthis.processCmd(\n\t\t\t\t\tmsg,\n\t\t\t\t\tDrawingSystemCommands.RESET,\n\t\t\t\t\t(msg) => (msg.promisedResponse ? msg.params.config : msg.config),\n\t\t\t\t\t(msg) => {\n\t\t\t\t\t\tthis.drawingSystem.setConfig(msg.config);\n\t\t\t\t\t\tthis.drawingSystem.reset();\n\t\t\t\t\t\tif (msg.promisedResponse) {\n\t\t\t\t\t\t\tthis.sendMessageToClient({\n\t\t\t\t\t\t\t\tid: msg.id,\n\t\t\t\t\t\t\t\tpromisedResponse: msg.promisedResponse,\n\t\t\t\t\t\t\t\tcommand: msg.command,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t'The configuration was not provided.'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase DrawingSystemCommands.TOGGLE_CELL:\n\t\t\t\tthis.processCmd(\n\t\t\t\t\tmsg,\n\t\t\t\t\tDrawingSystemCommands.TOGGLE_CELL,\n\t\t\t\t\t(msg) => msg.cx !== undefined && msg.cy !== undefined,\n\t\t\t\t\t(msg) => this.drawingSystem.toggleCell(msg.cx, msg.cy),\n\t\t\t\t\t'Either cx or cy was not provided.'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase DrawingSystemCommands.SEND_CELLS:\n\t\t\t\tthis.processCmd(\n\t\t\t\t\tmsg,\n\t\t\t\t\tDrawingSystemCommands.SEND_CELLS,\n\t\t\t\t\t() => true,\n\t\t\t\t\t(msg) => {\n\t\t\t\t\t\tlet sceneStack = this.drawingSystem.getScene().getStack();\n\t\t\t\t\t\tlet response = {\n\t\t\t\t\t\t\tid: msg.id,\n\t\t\t\t\t\t\tpromisedResponse: msg.promisedResponse,\n\t\t\t\t\t\t\tcommand: msg.command,\n\t\t\t\t\t\t\tnumberOfCells: sceneStack.length,\n\t\t\t\t\t\t\tcellFieldsCount: PackingConstants.FIELDS_PER_CELL,\n\t\t\t\t\t\t\tstack: this.packScene(sceneStack),\n\t\t\t\t\t\t};\n\t\t\t\t\t\tthis.sendMessageToClient(response, [response.stack.buffer]);\n\t\t\t\t\t},\n\t\t\t\t\t'Could not send the drawing system cells.'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase DrawingSystemCommands.DRAW_TEMPLATE:\n\t\t\t\tthis.processCmd(\n\t\t\t\t\tmsg,\n\t\t\t\t\tmsg.command,\n\t\t\t\t\t() => true,\n\t\t\t\t\t(msg) =>\n\t\t\t\t\t\tthis.drawingSystem.drawTemplate(\n\t\t\t\t\t\t\tmsg.templateName,\n\t\t\t\t\t\t\tmsg.row,\n\t\t\t\t\t\t\tmsg.col,\n\t\t\t\t\t\t\tmsg.config\n\t\t\t\t\t\t),\n\t\t\t\t\t'Could not send the drawing system cells.'\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Unsupported command ${msg.command} was received in DrawingSystem Worker.`\n\t\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the drawing scene and sends it to the client.\n\t * @param {*} msg\n\t */\n\tprocessScene(msg) {\n\t\tif (this.systemRunning() && this.drawingSystem.canUpdate()) {\n\t\t\tthis.drawingSystem.update();\n\t\t\tlet sceneStack = this.drawingSystem.getScene().getStack();\n\t\t\tlet response = {\n\t\t\t\tid: msg.id,\n\t\t\t\tpromisedResponse: msg.promisedResponse,\n\t\t\t\tcommand: msg.command,\n\t\t\t\torigin: Layers.DRAWING,\n\t\t\t\tnumberOfCells: sceneStack.length,\n\t\t\t\tcellFieldsCount: PackingConstants.FIELDS_PER_CELL,\n\t\t\t\tstack: this.packScene(sceneStack),\n\t\t\t};\n\t\t\tthis.sendMessageToClient(response, [response.stack.buffer]);\n\t\t}\n\t}\n}\n\nmodule.exports = DrawingSystemWorkerController;\n","const WorkerCommands = require('./WorkerCommands.js');\nconst LifeCycle = WorkerCommands.LifeCycle;\nconst { Cell } = require('./../entity-system/Entities.js');\n\n/**\n * The possible states a web worker can be in.\n */\nconst WorkerState = {\n\tSTOPPED: 1,\n\tPAUSED: 2, //Reserved. Not currently used.\n\tRUNNING: 3,\n};\n\nconst PackingConstants = {\n\tBYTES_PER_NUMBER: 2,\n\tFIELDS_PER_CELL: 3,\n\tFIELDS_PER_BOX: 4,\n};\n\n/**\n * Base class that defines the common capabilities of the Web Worker controllers.\n */\nclass AbstractWorkerController {\n\tconstructor(worker) {\n\t\tthis.worker = worker;\n\t\tthis.workerState = WorkerState.STOPPED;\n\t}\n\n\t/**\n\t * The core logic of the controller. Responsible for routing incomming messages to\n\t * the appropriate command.\n\t * @param {*} msg - The message to process.\n\t */\n\tprocess(msg) {\n\t\tif (!msg.command) {\n\t\t\tthrow new Error(\n\t\t\t\t`${this.constructor.name}: Command not provided in message.`\n\t\t\t);\n\t\t}\n\t\tswitch (msg.command) {\n\t\t\tcase LifeCycle.START:\n\t\t\t\tthis.workerState = WorkerState.RUNNING;\n\t\t\t\tbreak;\n\t\t\tcase LifeCycle.STOP:\n\t\t\t\tthis.stop();\n\t\t\t\tbreak;\n\t\t\tcase LifeCycle.PAUSE:\n\t\t\t\tbreak;\n\t\t\tcase LifeCycle.PROCESS_CYCLE:\n\t\t\t\tthis.workerState === WorkerState.RUNNING && this.processScene(msg);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.routeCommand(msg);\n\t\t}\n\t}\n\n\tstop() {\n\t\tthis.workerState = WorkerState.STOPPED;\n\t}\n\n\t/**\n\t * Route the inbound command to the appropriate processor.\n\t * @param {*} msg The message to be routed.\n\t */\n\trouteCommand(msg) {\n\t\tthrow new Error(\n\t\t\t'Child classes of AbstractWorkerController must implement the method routeCommand(msg).'\n\t\t);\n\t}\n\n\t/**\n\t * Processes an inbound message.\n\t * @param {*} msg - The message that was passed to the web worker.\n\t * @param {String} commandName - The enumerated command to process.\n\t * @param {Function} commandCriteria - Conditional that determines whether to run the command processor or not.\n\t * @param {Function} cmdProcessor - The command function to run when the criteria is met.\n\t * @param {String} errMsg - The error message to throw when the conditional isn't met.\n\t */\n\tprocessCmd(msg, commandName, commandCriteria, cmdProcessor, errMsg) {\n\t\tif (commandCriteria(msg)) {\n\t\t\tcmdProcessor(msg);\n\t\t} else {\n\t\t\tthrow new Error(`Cannot process the command ${commandName}: ${errMsg}`);\n\t\t}\n\t}\n\n\t/**\n\t * Finds a property regardless if it is a promised payload or not.\n\t * @param {*} msg - The message to inspect.\n\t * @param {*} name - The name of the property to find.\n\t * @returns The found property. Returns undefined if the property is not present.\n\t */\n\tfindPromisedProperty(msg, name) {\n\t\treturn msg.params ? msg.params[name] : msg[name];\n\t}\n\n\t/**\n\t * Processes the scene for a single tick.\n\t * @param {*} msg The message to process.\n\t */\n\tprocessScene(msg) {\n\t\tthrow new Error(\n\t\t\t'Child classes of AbstractWorkerController must implement the method processScene().'\n\t\t);\n\t}\n\n\t/**\n\t * @returns {Boolean} Determines if the service is running or not.\n\t */\n\tsystemRunning() {\n\t\treturn this.workerState === WorkerState.RUNNING;\n\t}\n\n\t/**\n\t * Sends a message to the web worker's client (main thread).\n\t * @param {*} msg The message to send.\n\t */\n\tsendMessageToClient(msg, transferList) {\n\t\tthis.worker.postMessage(msg, transferList);\n\t}\n\n\t//TODO: Put the buffer packing methods into their own class. This should be delegated.\n\t/*\n\tPacks the active scene as a Uint16Array. \n\t- Number range is [0,65535]\n\t- Each number is 2 bytes.\n\n\thttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays\n\t*/\n\tpackScene(sceneStack) {\n\t\t// prettier-ignore\n\t\tlet bufferLength = PackingConstants.BYTES_PER_NUMBER * PackingConstants.FIELDS_PER_CELL * sceneStack.length;\n\t\tlet buffer = new ArrayBuffer(bufferLength);\n\t\tlet dataView = new Uint16Array(buffer);\n\t\tlet offset;\n\n\t\t//First pack all the cells.\n\t\tfor (var current = 0; current < sceneStack.length; current++) {\n\t\t\toffset = PackingConstants.FIELDS_PER_CELL * current;\n\t\t\tdataView[offset] = sceneStack[current].row;\n\t\t\tdataView[offset + 1] = sceneStack[current].col;\n\t\t\tdataView[offset + 2] = sceneStack[current].state;\n\t\t}\n\t\t\n\t\treturn dataView;\n\t}\n\n\t/**\n\t\tConvert a typed array of cells into an array of Cells.\n\t\t@param {Uint16Array} buffer - The typed array containing cells.\n\t\t@param {number} offset - The index on the typed array to start the conversion.\n\t\t@param {number} numberOfCells - How many cells the typed array contains.\n\t\t@param {number} cellsFieldsCount - How many fields each cell contains.\n\t\t@returns {Cell[]}\n\t*/\n\tunpackCells(buffer, offset, numberOfCells, cellsFieldsCount) {\n\t\tlet cells = [];\n\t\tlet bufferEnd = offset + numberOfCells * cellsFieldsCount;\n\t\tif (buffer && ArrayBuffer.isView(buffer)) {\n\t\t\tfor (\n\t\t\t\tvar current = offset;\n\t\t\t\tcurrent < bufferEnd;\n\t\t\t\tcurrent += cellsFieldsCount\n\t\t\t) {\n\t\t\t\tcells.push(\n\t\t\t\t\tnew Cell(buffer[current], buffer[current + 1], buffer[current + 2])\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t}\n}\n\nmodule.exports = { AbstractWorkerController, PackingConstants, WorkerState };\n","/**\n * Defines the possible states a Cell can have.\n */\nconst CellStates = {\n\tDEAD: 0,\n\tACTIVE: 1,\n\tRETIRED: 2\n};\n\nmodule.exports = CellStates;\n","const DrawingStateManager = require('./DrawingStateManager.js');\nconst SceneManager = require('./SceneManager.js');\nconst TemplateFactory = require('./../templates/TemplateFactory.js');\nconst { Cell } = require('./../entity-system/Entities.js');\n/**\n * The possible states the drawing system can be in.\n * @private\n */\nconst States = {\n\tIDLE: 'IDLE',\n\tUPDATING: 'UPDATING',\n};\n\n/**\n * A system for drawing on a grid. Designed to be used in the context of a web worker.\n */\nclass DrawingSystem {\n\t/**\n\t * Creates a new drawing system.\n\t */\n\tconstructor() {\n\t\tthis.config = {\n\t\t\tzoom: 1,\n\t\t};\n\t\tthis.stateManager = new DrawingStateManager(this.config);\n\t\tthis.scene = new SceneManager();\n\t\tthis.displayStorageStructure = false;\n\t\tthis.state = States.IDLE;\n\t}\n\n\t/**\n\t * @returns {State} Returns the active state.\n\t */\n\tgetState() {\n\t\treturn this.state;\n\t}\n\n\t/**\n\t * Replaces the current configuration.\n\t * @param {*} config\n\t */\n\tsetConfig(config) {\n\t\tthis.config = config;\n\t\tthis.stateManager.setConfig(this.config);\n\t}\n\n\t/**\n\t * @returns {SceneManager} The current scene.\n\t */\n\tgetScene() {\n\t\treturn this.scene;\n\t}\n\n\t/**\n\t * @returns {DrawingStateManager} Returns the state manager for the drawing system.\n\t */\n\tgetStateManager() {\n\t\treturn this.stateManager;\n\t}\n\n\tupdate() {\n\t\tthis.state = States.UPDATING;\n\t\tthis.scene.clear();\n\t\tthis.getStateManager().processCells(this.scene);\n\t\tthis.state = States.IDLE;\n\t}\n\n\tcanUpdate() {\n\t\treturn this.state === States.IDLE;\n\t}\n\n\t/**\n\t * Used to preload the drawing system with alive cells.\n\t * @param {Cell[]} cells - An array of alive cells.\n\t */\n\tsetCells(cells) {\n\t\tthis.getStateManager().setCells(cells);\n\t}\n\n\t/**\n\t * Provides a deep copy of the currently alive cells.\n\t * @returns {Cell[]}\n\t */\n\tgetCells() {\n\t\treturn this.getStateManager().getCells();\n\t}\n\n\t/**\n\t * Sets the cell size to use.\n\t * @param {number} size\n\t */\n\tsetCellSize(size) {\n\t\tif (!this.config) {\n\t\t\tthis.config = {};\n\t\t}\n\t\tthis.config.zoom = size;\n\t}\n\n\t/**\n\t * Flips a grid cell to alive or dead.\n\t * @param {number} x - The X coordinate of the cell.\n\t * @param {number} y - The Y coordinate of the cell.\n\t */\n\ttoggleCell(x, y) {\n\t\tif (this.state === States.IDLE) {\n\t\t\tthis.state = States.UPDATING;\n\t\t\tthis.getStateManager().toggleCell(x, y);\n\t\t\tthis.state = States.IDLE;\n\t\t}\n\t}\n\n\t/**\n\t * Sets whether to draw the quad tree.\n\t * @param {boolean} display\n\t */\n\tdisplayStorage(display) {\n\t\tthis.displayStorageStructure = display;\n\t}\n\n\t/**\n\t * Clears the simulation.\n\t */\n\treset() {\n\t\tthis.scene.clear();\n\t\tthis.getStateManager().clear();\n\t}\n\n\tdrawTemplate(templateName, row, col, config) {\n\t\tlet newCells = TemplateFactory.generate(templateName, row, col, config);\n\t\tCell.mergeObjsWithCells(newCells, this.getCells());\n\t\tthis.setCells(newCells);\n\t}\n}\n\nmodule.exports = DrawingSystem;\n","const { CellMortonStore } = require('./CellMortonStore.js');\nconst { Cell } = require('../entity-system/Entities.js');\n\n/**\n * Orchestrates drawing.\n */\nclass DrawingStateManager {\n\t/**\n\t * Create a new DrawingStateManager.\n\t * @param {object} config - The simulation configuration object.\n\t */\n\tconstructor(config) {\n\t\tthis.config = config;\n\t\tthis.currentStore = new CellMortonStore();\n\t}\n\n\tsetConfig(config) {\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Set's what cells should be in the initial drawing.\n\t * @param {Cell[]} cells - An array of alive cells.\n\t */\n\tsetCells(cells) {\n\t\tthis.clear();\n\t\tthis.currentStore.addList(cells);\n\t}\n\n\t/**\n\t * Creates a deep copy of the cells in the drawing.\n\t * @returns {Cell[]} The copy of the cells.\n\t */\n\tgetCells() {\n\t\treturn this.currentStore.cells();\n\t}\n\n\t/**\n\t * Draws a cell or removes it.\n\t * @param {number} x - The X coordinate on the simulation's grid.\n\t * @param {number} y - The Y coordinate on the simulation's grid.\n\t */\n\ttoggleCell(x, y) {\n\t\t//Assume it's already there and try to delete it.\n\t\tif (!this.currentStore.delete(x, y)) {\n\t\t\t//If the delete failed, then it wasn't already there, so add it.\n\t\t\tthis.currentStore.add(new Cell(x, y));\n\t\t}\n\t}\n\n\t/**\n\t * Prepares the alive cells to be drawn.\n\t * @param {SceneManager} scene - The scene to add the cells to.\n\t */\n\tprocessCells(scene) {\n\t\tscene.push(this.currentStore.cells());\n\t}\n\n\t/**\n\t * Empties the drawing simulation.\n\t */\n\tclear() {\n\t\tthis.currentStore.clear();\n\t}\n}\n\nmodule.exports = DrawingStateManager;\n","//Borrowed from: https://github.com/mikolalysenko/bit-twiddle/blob/master/twiddle.js\nfunction encode(x, y) {\n\tx &= 0xffff; //Constrain to 16 bits. 0xffff is 65535 which is the number range of 16 bits. 1111111111111111 in binary. Numbers larger than 65535 will roll over.\n\tx = (x | (x << 8)) & 0x00ff00ff; //Shift to the left by 8. Mask: 111111110000000011111111\n\tx = (x | (x << 4)) & 0x0f0f0f0f; //Mask: 1111000011110000111100001111\n\tx = (x | (x << 2)) & 0x33333333; //Mask: 110011001100110011001100110011\n\tx = (x | (x << 1)) & 0x55555555; //Mask: 1010101010101010101010101010101\n\n\ty &= 0xffff;\n\ty = (y | (y << 8)) & 0x00ff00ff;\n\ty = (y | (y << 4)) & 0x0f0f0f0f;\n\ty = (y | (y << 2)) & 0x33333333;\n\ty = (y | (y << 1)) & 0x55555555;\n\n\treturn x | (y << 1);\n}\n\nfunction decode(zcode) {\n\treturn [deinterleave(zcode, 0), deinterleave(zcode, 1)];\n}\n\n//Based on https://github.com/mikolalysenko/bit-twiddle/blob/master/twiddle.js\nfunction deinterleave(zcode, component) {\n\tzcode = (zcode >>> component) & 0x55555555; // 1010101010101010101010101010101\n\tzcode = (zcode | (zcode >>> 1)) & 0x33333333; // 110011001100110011001100110011\n\tzcode = (zcode | (zcode >>> 2)) & 0x0f0f0f0f; // 1111000011110000111100001111\n\tzcode = (zcode | (zcode >>> 4)) & 0x00ff00ff; // 111111110000000011111111\n\tzcode = (zcode | (zcode >>> 8)) & 0x000ffff; // 1111111111111111\n\treturn (zcode << 16) >> 16;\n}\n\nfunction clip(value, min, max) {\n\treturn Math.min(max, Math.max(min, value));\n}\n\nclass CellMortonStore {\n\tconstructor(width, height) {\n\t\tthis.map = new Map();\n\t}\n\n\tsize() {\n\t\treturn this.map.size;\n\t}\n\n\taddList(cells) {\n\t\tfor (var i = 0; i < cells.length; i++) {\n\t\t\tthis.map.set(encode(cells[i].row, cells[i].col), cells[i]);\n\t\t}\n\t\treturn this;\n\t}\n\n\tadd(cell) {\n\t\tthis.map.set(encode(cell.row, cell.col), cell);\n\t\treturn this;\n\t}\n\n\tsearch(x, y) {\n\t\treturn this.get(encode(x, y));\n\t}\n\n\thas(zcode) {\n\t\treturn this.map.has(zcode);\n\t}\n\n\tget(zcode) {\n\t\treturn this.map.get(zcode);\n\t}\n\n\tdelete(x, y) {\n\t\treturn this.map.delete(encode(x, y));\n\t}\n\n\tclear() {\n\t\tthis.map.clear();\n\t\treturn this;\n\t}\n\n\tcells() {\n\t\treturn [...this.map.values()];\n\t}\n\n\t/**\n\t * Find all of the cells in a given cell's Moore neighborhood.\n\t *\n\t * {@link https://www.conwaylife.com/wiki/Cellular_automaton#Common_dimensions_and_neighborhoods | Moore Neighborhood}\n\t *\n\t * @param {*} cell\n\t */\n\tneighborhood(cell, width, height) {\n\t\tlet found = [];\n\t\tlet current;\n\n\t\t//constrain the neigborhood to the boundaries of the grid\n\t\tlet left = clip(cell.row - 1, 0, width);\n\t\tlet right = clip(cell.row + 1, 0, width);\n\t\tlet bottom = clip(cell.col - 1, 0, height);\n\t\tlet top = clip(cell.col + 1, 0, height);\n\n\t\tfor (var row = left; row <= right; row++) {\n\t\t\tfor (var col = bottom; col <= top; col++) {\n\t\t\t\tcurrent = this.get(encode(row, col));\n\t\t\t\tcurrent && found.push(current);\n\t\t\t}\n\t\t}\n\t\treturn found;\n\t}\n}\n\nmodule.exports = { decode, encode, CellMortonStore, clip };\n","/**\n * Data structure for storing the entities ready to render.\n */\nclass SceneManager {\n\t/**\n\t * Create a new SceneManager\n\t */\n\tconstructor() {\n\t\tthis.stack = [];\n\t}\n\n\t/**\n\t * Add a a single entity or an array of entities to the scene to be rendered.\n\t * @param {Entity | Entity[]} entity\n\t * @return {SceneManager} Returns the instance of the SceneManager.\n\t */\n\tpush(entity) {\n\t\tif (Array.isArray(entity)) {\n\t\t\tthis.stack = this.stack.concat(entity);\n\t\t} else {\n\t\t\tthis.stack.push(entity);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pop the next entity off the scene's stack.\n\t * @returns {Entity} The next entity to render.\n\t */\n\tnextEntity() {\n\t\treturn this.stack.shift();\n\t}\n\n\t/**\n\t * Determine if the stack is empty or not.\n\t * @returns {boolean}\n\t */\n\tfullyRendered() {\n\t\treturn !(this.stack.length > 0);\n\t}\n\n\t/**\n\t * Removes all entities from the stack.\n\t */\n\tclear() {\n\t\tthis.stack = [];\n\t}\n\n\tgetStack() {\n\t\treturn this.stack;\n\t}\n\n\tserializeStack() {\n\t\treturn JSON.stringify(this.stack);\n\t}\n}\n\nmodule.exports = SceneManager;\n","const ConwayMemorial = require('./ConwayMemorial.js');\nconst Block = require('./Block.js');\nconst HorizontalSpinner = require('./HorizontalSpinner.js');\nconst VerticalSpinner = require('./VerticalSpinner.js');\nconst Toad = require('./Toad.js');\nconst Glider = require('./Glider.js');\nconst LightSpaceShip = require('./LightSpaceShip.js');\nconst LinearCellularAutomaton = require('./automata/LinearCellularAutomaton.js');\nconst RandomDiceRoll = require('./RandomDiceRoll.js');\n\nclass TemplateFactory {\n\tstatic generate(commandName, x, y, config) {\n\t\tlet template = commandName.startsWith('wr-rule-')\n\t\t\t? this.generateElementaryCA(commandName, config)\n\t\t\t: this.generateRegisteredTemplate(commandName, config);\n\t\treturn template.generateCells(x, y);\n\t}\n\n\tstatic generateElementaryCA(commandName, config) {\n\t\tlet tokens = commandName.split('-');\n\t\tlet caRuleName = tokens[tokens.length - 1];\n\t\tlet ruleNumber = Number.parseInt(caRuleName);\n\t\treturn new LinearCellularAutomaton(\n\t\t\tconfig,\n\t\t\truleNumber,\n\t\t\tconfig.elementaryCAs.useRandomStart\n\t\t);\n\t}\n\n\tstatic generateRegisteredTemplate(commandName, config) {\n\t\tlet template;\n\t\tswitch (commandName) {\n\t\t\tcase 'conways-memorial':\n\t\t\t\ttemplate = new ConwayMemorial();\n\t\t\t\tbreak;\n\t\t\tcase 'da-block':\n\t\t\t\ttemplate = new Block();\n\t\t\t\tbreak;\n\t\t\tcase 'vert-spinner':\n\t\t\t\ttemplate = new VerticalSpinner();\n\t\t\t\tbreak;\n\t\t\tcase 'horiz-spinner':\n\t\t\t\ttemplate = new HorizontalSpinner();\n\t\t\t\tbreak;\n\t\t\tcase 'toad':\n\t\t\t\ttemplate = new Toad();\n\t\t\t\tbreak;\n\t\t\tcase 'glider':\n\t\t\t\ttemplate = new Glider();\n\t\t\t\tbreak;\n\t\t\tcase 'light-ship':\n\t\t\t\ttemplate = new LightSpaceShip();\n\t\t\t\tbreak;\n\t\t\tcase 'wr-rule-110':\n\t\t\t\ttemplate = new LinearCellularAutomaton(\n\t\t\t\t\tconfig,\n\t\t\t\t\t110\n\t\t\t\t).setInitializationAlgorithm((width) => width);\n\t\t\t\tbreak;\n\t\t\tcase 'dice-roll':\n\t\t\t\ttemplate = new RandomDiceRoll(config);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown template name.');\n\t\t}\n\t\treturn template;\n\t}\n}\n\nmodule.exports = TemplateFactory;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass ConwayMemorial extends DrawingTemplate {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpattern() {\n\t\treturn [\n\t\t\t[0, 0, 1, 1, 1, 0, 0],\n\t\t\t[0, 0, 1, 0, 1, 0, 0],\n\t\t\t[0, 0, 1, 0, 1, 0, 0],\n\t\t\t[0, 0, 0, 1, 0, 0, 0],\n\t\t\t[1, 0, 1, 1, 1, 0, 0],\n\t\t\t[0, 1, 0, 1, 0, 1, 0],\n\t\t\t[0, 0, 0, 1, 0, 0, 1],\n\t\t\t[0, 0, 1, 0, 1, 0, 0],\n\t\t\t[0, 0, 1, 0, 1, 0, 0],\n\t\t];\n\t}\n\n\t//The center of origin for the pattern.\n\torigin() {\n\t\treturn { x: -3, y: -4 };\n\t}\n}\n\nmodule.exports = ConwayMemorial;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass Block extends DrawingTemplate {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpattern() {\n\t\treturn [\n\t\t\t[1, 1],\n\t\t\t[1, 1],\n\t\t];\n\t}\n}\n\nmodule.exports = Block;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass HorizontalSpinner extends DrawingTemplate {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpattern() {\n\t\treturn [[1, 1, 1]];\n\t}\n}\n\nmodule.exports = HorizontalSpinner;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass VerticalSpinner extends DrawingTemplate {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpattern() {\n\t\t// prettier-ignore\n\t\treturn [\n\t\t\t[1], \n\t\t\t[1], \n\t\t\t[1]\n\t\t];\n\t}\n}\n\nmodule.exports = VerticalSpinner;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass Toad extends DrawingTemplate {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tpattern() {\n\t\treturn [\n\t\t\t[0, 1, 1, 1],\n\t\t\t[1, 1, 1, 0],\n\t\t];\n\t}\n}\n\nmodule.exports = Toad;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass Glider extends DrawingTemplate {\n\tpattern() {\n\t\treturn [\n\t\t\t[0, 1, 0],\n\t\t\t[0, 0, 1],\n\t\t\t[1, 1, 1],\n\t\t];\n\t}\n}\n\nmodule.exports = Glider;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass LightSpaceShip extends DrawingTemplate {\n\tpattern() {\n\t\treturn [\n\t\t\t[0, 1, 0, 0, 1],\n\t\t\t[1, 0, 0, 0, 0],\n\t\t\t[1, 0, 0, 0, 1],\n\t\t\t[1, 1, 1, 1, 0],\n\t\t];\n\t}\n}\n\nmodule.exports = LightSpaceShip;\n","const DrawingTemplate = require('../DrawingTemplate.js');\n\nconst INVALID_RULE_MSG = 'Can only process rules in the in range [0,255].';\nclass LinearCellularAutomaton extends DrawingTemplate {\n\tconstructor(config, rule = 0, useRandomStart = false) {\n\t\tsuper();\n\t\tthis.config = config;\n\t\tthis.useRandomStart = useRandomStart; //TODO: This is also in the config param. Remove it.\n\t\tthis.enforceRuleSet(rule)\n\t\t\t.setRuleSet(this.generateRuleSet(rule))\n\t\t\t.establishInitializationAlgorithm();\n\t}\n\n\testablishInitializationAlgorithm() {\n\t\tthis.initializationAlgorithm = (width) => {\n\t\t\t//The default is to start the CA in the middle of row zero.\n\t\t\treturn Math.floor(width / 2);\n\t\t};\n\t\treturn this;\n\t}\n\n\tenforceRuleSet(rule) {\n\t\tif (rule < 0 || rule > 255) {\n\t\t\tthrow new Error(INVALID_RULE_MSG);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t *\n\t * @param {number} rule - An integer in the range [1,255].\n\t * @returns number[] An integer represented as an 8 bit binary number.\n\t */\n\tgenerateRuleSet(rule) {\n\t\tlet binaryStr = rule.toString(2);\n\t\tlet paddedStr = binaryStr.padStart(8, '0');\n\t\treturn [...paddedStr].map((s) => parseInt(s));\n\t}\n\n\tgenerateCells(x, y) {\n\t\treturn this.makeCellsFrom2DArray(this.pattern());\n\t}\n\n\tpattern() {\n\t\tlet height = Math.floor(this.config.landscape.height);\n\t\tlet width = Math.floor(this.config.landscape.width);\n\t\tlet ca = Array(height);\n\t\tca[0] = this.useRandomStart\n\t\t\t? this.randomStartingPoint(width)\n\t\t\t: this.traditionalStartingPoint(width);\n\n\t\t//Generate the next row based on the current row.\n\t\tlet neighborhood;\n\t\tfor (let row = 0; row < height; row++) {\n\t\t\tca[row + 1] = Array(width);\n\t\t\tfor (let col = 0; col < width; col++) {\n\t\t\t\tneighborhood = this.findNeighborHood(ca[row], col);\n\t\t\t\tca[row + 1][col] = this.evaluateRules(neighborhood);\n\t\t\t}\n\t\t}\n\t\treturn ca;\n\t}\n\n\t/**\n\t * Generate the traditional starting point for elementary CAs.\n\t * All zeros except for the center.\n\t * @returns {Number[]}\n\t */\n\ttraditionalStartingPoint(width) {\n\t\tlet startingPoint = this.findStartingIndex(width);\n\t\t//The first row is initialized to zero except for its starting point.\n\t\tlet initialRow = Array(width).fill(0);\n\t\tinitialRow[startingPoint] = 1;\n\t\treturn initialRow;\n\t}\n\n\trandomStartingPoint(width) {\n\t\treturn Array(width).fill(0).map((i) => this.rollDice());\n\t}\n\n\t//floor(random() * (max - min + 1)) + min\n\t//floor(random() * (1 - 0 + 1)) + 0\n\t//floor(random() * (2))\n\trollDice() {\n\t\treturn Math.floor(Math.random() * 2);\n\t}\n\n\tsetInitializationAlgorithm(algorithm) {\n\t\tthis.initializationAlgorithm = algorithm;\n\t\treturn this;\n\t}\n\n\tfindStartingIndex(width) {\n\t\treturn this.initializationAlgorithm(width);\n\t}\n\n\tfindNeighborHood(generation, index) {\n\t\treturn [\n\t\t\tthis.findArrayValue(generation, index - 1),\n\t\t\tthis.findArrayValue(generation, index),\n\t\t\tthis.findArrayValue(generation, index + 1),\n\t\t];\n\t}\n\n\tfindArrayValue(array, index) {\n\t\t// Hard Dead Border\n\t\t// if (index < 0 || index > array.length - 1) {\n\t\t// \treturn 0;\n\t\t// }\n\n\t\t//Wrap the border\n\t\tlet value;\n\t\tif (index < 0) {\n\t\t\tvalue = array[array.length - 1];\n\t\t} else if (index > array.length - 1) {\n\t\t\tvalue = index[0];\n\t\t} else {\n\t\t\tvalue = array[index];\n\t\t}\n\t\treturn value;\n\t}\n\n\tevaluateRules(neighborhood) {\n\t\tlet ruleIndex = parseInt(neighborhood.join(''), 2);\n\t\treturn this.getRule(ruleIndex);\n\t}\n\n\tgetRule(ruleIndex) {\n\t\treturn this.rulesSet[ruleIndex];\n\t}\n\n\t/**\n\t * Stores the rule set in reverse order from Wolfram's Specificiation to enable binary lookup.\n\t * @param {number[]} ruleSet\n\t */\n\tsetRuleSet(ruleSet) {\n\t\tthis.rulesSet = ruleSet.reverse();\n\t\treturn this;\n\t}\n\n\tgetRulesSetStr() {\n\t\treturn this.rulesSet.reverse().join('');\n\t}\n}\n\nmodule.exports = LinearCellularAutomaton;\n","const DrawingTemplate = require('./DrawingTemplate.js');\n\nclass RandomDiceRoll extends DrawingTemplate {\n\tconstructor(config) {\n\t\tsuper();\n\t\tthis.config = config;\n\t}\n\n  generateCells(x, y) {\n\t\treturn this.makeCellsFrom2DArray(this.pattern());\n  }\n  \n\tpattern() {\n\t\tlet height = Math.ceil(this.config.landscape.height);\n\t\tlet width = Math.ceil(this.config.landscape.width);\n\t\tlet birthRules = this.config.game.rules.birth;\n\t\tlet grid = Array(height);\n\t\tfor (let row = 0; row < height; row++) {\n\t\t\tgrid[row] = Array(width);\n\t\t\tfor (let col = 0; col < width; col++) {\n\t\t\t\tgrid[row][col] = birthRules.includes(this.rollDice()) ? 1 : 0;\n\t\t\t}\n\t\t}\n\t\treturn grid;\n\t}\n\n\t/**\n\t * A cell can have 8 neighbors. Rolling the dice randomly selects a number\n\t * in the range [0,8].\n\t */\n\trollDice() {\n\t\t//Leverages the pattern: Math.floor(Math.random() * (max - min + 1)) + min\n\t\t//                       Math.floor(Math.random() * (8 - 0 + 1)) + 0\n\t\t//                       Math.floor(Math.random() * (9))\n\t\treturn Math.floor(Math.random() * 9);\n\t}\n}\n\nmodule.exports = RandomDiceRoll;\n","module.exports = {\n\tGRID: 'GRID',\n\tDRAWING: 'DRAWING',\n\tSIM: 'SIMULATION',\n};\n","function establishWorkerContext() {\n\treturn 'undefined' !== typeof WorkerGlobalScope ? self : this;\n}\n\nmodule.exports = { establishWorkerContext };\n"],"sourceRoot":""}