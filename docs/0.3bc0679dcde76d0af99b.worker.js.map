{"version":3,"sources":["webpack://Conways/webpack/bootstrap","webpack://Conways/./src/lib/entity-system/Entities.js","webpack://Conways/./src/lib/workers/GridSystem.worker.js","webpack://Conways/./src/lib/workers/WorkerCommands.js","webpack://Conways/./src/lib/core/SceneManager.js","webpack://Conways/./src/lib/entity-system/CellStates.js","webpack://Conways/./src/lib/entity-system/Traits.js"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;AClFA;AACA;AACA;AACA;;AAEA,mBAAmB,mBAAO,CAAC,CAAiB;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,kBAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,YAAY,MAAM;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClPA,uBAAuB,mBAAO,CAAC,CAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;;AAEA,qBAAqB,mBAAO,CAAC,CAAyB;AACtD,OAAO,kBAAkB,GAAG,mBAAO,CAAC,CAA8B;AAClE,OAAO,gCAAgC,GAAG,mBAAO,CAAC,CAA4B;;AAE9E;AACA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,OAAO;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACzEA;AACA;AACA;AACA,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA,EAAE;AACF;AACA;;;;;;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,kBAAkB;AAC9B,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;ACTA,OAAO,0BAA0B,GAAG,mBAAO,CAAC,CAAe;AAC3D;AACA;AACA,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,sCAAsC,IAAI;AAC1C;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACniBAAiB,0BAA0B;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,wCAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wCAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C,EAAE;AACF;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8CAA8C;AAC9C,gCAAgC;AAChC,gCAAgC;AAChC,gCAAgC;AAChC;AACA,gCAAgC;AAChC;AACA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,wCAAwC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"0.3bc0679dcde76d0af99b.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/**\n * A module for defining render-able entities with traits.\n * @module entity_system\n */\n\nconst CellStates = require('./CellStates.js');\n\n/**\n * A render-able entity. The entity is defined by registering traits.\n */\nclass Entity {\n\t/**\n\t * Create a new Entity.\n\t */\n\tconstructor() {\n\t\tthis.traits = [];\n\t\tthis.className = 'Entity';\n\t}\n\n\t/**\n\t * Process all register traits.\n\t * @param {HTMLCanvasContext} rendererContext\n\t */\n\trender(rendererContext) {\n\t\tlet context = {\n\t\t\trendererContext: rendererContext,\n\t\t\tentity: this,\n\t\t};\n\t\tthis.traits.forEach((trait) => {\n\t\t\ttrait.process(context);\n\t\t});\n\t}\n\n\t/**\n\t * Expands the definition of the entity by registering traits.\n\t * @param {Trait} trait - An implementation of the Trait abstract class.\n\t */\n\tregister(trait) {\n\t\tthis.traits.push(trait);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Automatically called by JSON.stringify().\n\t * Injects the original class name as a property when serialized\n\t * which an be used to rebuild a Scene after communicated from a thread.\n\t * @returns Entity\n\t */\n\ttoJSON() {\n\t\tthis.className = this.constructor.name;\n\t\treturn this;\n\t}\n\n\tcopyParams(original) {\n\t\tfor (var key in original) {\n\t\t\tif (key != 'className' && key != 'traits') {\n\t\t\t\tthis[key] = original[key];\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tinitTraits(original, traitBuilderFactory) {\n\t\tthis.traits = original.traits.map((traitLit) => {\n\t\t\tvar traitBuilder = traitBuilderFactory(traitLit.className);\n\t\t\treturn traitBuilder ? traitBuilder(traitLit) : new Trait();\n\t\t});\n\t\treturn this;\n\t}\n}\n\nclass EntityBatch extends Entity {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.entities = [];\n\t}\n\n\tadd(entity) {\n\t\tif (entity && Array.isArray(entity) && entity.length > 0) {\n\t\t\tthis.entities = this.entities.concat(entity);\n\t\t} else {\n\t\t\tentity && this.entities.push(entity);\n\t\t}\n\t\treturn this;\n\t}\n}\n\nclass EntityBatchArrayBuffer extends Entity {\n\tconstructor(buffer, offset, numberOfEntities, entityFieldsCount) {\n\t\tsuper();\n\t\tthis.buffer = buffer;\n\t\tthis.initialOffset = offset;\n\t\tthis.bufferEnd = offset + numberOfEntities * entityFieldsCount;\n\t\tthis.numberOfEntities = numberOfEntities;\n\t\tthis.entityFieldsCount = entityFieldsCount;\n\t}\n}\n\nconst CELL_WIDTH = 1;\nconst CELL_HEIGHT = 1;\n\n/**\n * Represents a single unit on an abstract 2D grid.\n *\n * The width and height of the cell are the equal.\n * The grid is uniform.\n * @extends Entity\n */\nclass Cell extends Entity {\n\t/**\n\t * Create a new cell.\n\t * @param {number} row - The horizontal location of the cell on a grid.\n\t * @param {number} col - The vertical location of the cell on a grid.\n\t */\n\tconstructor(row, col, state = CellStates.ACTIVE) {\n\t\tsuper();\n\t\tthis.className = 'Cell';\n\t\tthis.row = row;\n\t\tthis.col = col;\n\t\tthis.state = state;\n\t}\n\n\t/**\n\t * Intersection Test. Is the cell inside of a provided rectangle.\n\t * @param {number} x\n\t * @param {number} y\n\t * @param {number} xx\n\t * @param {number} yy\n\t * @returns {boolean}\n\t */\n\tisInsideRect(x, y, xx, yy) {\n\t\treturn x <= this.row && this.row <= xx && y <= this.col && this.col <= yy;\n\t}\n\n\t/**\n\t * Create a deep copy of the cell.\n\t * @returns {Cell}\n\t */\n\tclone() {\n\t\treturn new Cell(this.row, this.col);\n\t}\n\n\trightBoundary() {\n\t\treturn this.row + CELL_WIDTH;\n\t}\n\n\tlowerBoundary() {\n\t\treturn this.col + CELL_HEIGHT;\n\t}\n\n\tstatic buildInstance(params) {\n\t\treturn new Cell().copyParams(params);\n\t}\n\n\tstatic mergeObjsWithCells(cells, objs) {\n\t\tobjs.forEach((obj) => {\n\t\t\t//Don't include any boxes.\n\t\t\tif (\n\t\t\t\tobj.className === 'Cell' &&\n\t\t\t\t!cells.some((c) => c.row == obj.row && c.col == obj.col)\n\t\t\t) {\n\t\t\t\tcells.push(this.buildInstance(obj));\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass DeadCell extends Cell {\n\tconstructor(row, col) {\n\t\tsuper(row, col);\n\t}\n\n\tgetState() {\n\t\treturn CellStates.DEAD;\n\t}\n}\n\n/**\n * A grid.\n */\nclass GridEntity extends Entity {\n\t/**\n\t * Creates a new grid entity\n\t * @param {number} width - The total width of the grid.\n\t * @param {number} height - The total height of the grid.\n\t * @param {number} cWidth - The width of a grid cell.\n\t * @param {number} cHeight - The height of a grid cell.\n\t */\n\tconstructor(width = null, height = null, cWidth = null, cHeight = null) {\n\t\tsuper();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t\tthis.cell = { width: cWidth, height: cHeight };\n\t\tthis.className = 'GridEntity';\n\t}\n\n\tstatic buildInstance(params, traitBuilderMap = null) {\n\t\tlet entity = new GridEntity().copyParams(params);\n\t\ttraitBuilderMap && entity.initTraits(params, traitBuilderMap);\n\t\treturn entity;\n\t}\n}\n\n/**\n * Represents a box that can be processed via Traits.\n */\nclass Box extends Entity {\n\t/**\n\t * Creates a new Box.\n\t * @param {number} x - Left most X coordinate.\n\t * @param {number} y - Upper most Y coordinate.\n\t * @param {number} xx - Right most X coordinate.\n\t * @param {number} yy - Lower most Y coordinate.\n\t * @param {boolean} alive - If the cell is alive or not.\n\t */\n\tconstructor(x = null, y = null, xx = null, yy = null, alive = null) {\n\t\tsuper();\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.xx = xx;\n\t\tthis.yy = yy;\n\t\tthis.alive = alive;\n\t\tthis.className = 'Box';\n\t}\n\n\tstatic buildInstance(params, traitBuilderMap = null) {\n\t\tlet box = new Box().copyParams(params);\n\t\ttraitBuilderMap && box.initTraits(params, traitBuilderMap);\n\t\treturn box;\n\t}\n}\n\nmodule.exports = {\n\tBox,\n\tCell,\n\tDeadCell,\n\tEntity,\n\tEntityBatch,\n\tEntityBatchArrayBuffer,\n\tGridEntity,\n\tCELL_HEIGHT,\n\tCELL_WIDTH,\n};\n","const WorkerCommands = require('./WorkerCommands.js');\n/**\n * A web worker dedicated to constructing a 2D grid. Rendered by the main frame.\n */\nonmessage = function (event) {\n\tlet msg = event.data;\n\tif (!msg.command) {\n\t\tconsole.error('Unexpected messaged received in GridSystemWorker.');\n\t\tconsole.error(event);\n\t\treturn;\n\t}\n\n\tlet scene;\n\tswitch (msg.command) {\n\t\tcase WorkerCommands.LifeCycle.PROCESS_CYCLE:\n\t\t\t//TODO: Add error handling around parameters\n\t\t\tscene = GridBuilder.buildGrid(\n\t\t\t\tmsg.parameters.cellWidth,\n\t\t\t\tmsg.parameters.cellHeight,\n\t\t\t\tmsg.parameters.gridWidth,\n\t\t\t\tmsg.parameters.gridHeight\n\t\t\t);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tconsole.error('Unsupported command received in GridSystemWorker.');\n\t\t\tconsole.error(msg.command);\n\t\t\tscene = GridBuilder.buildEmptyScene();\n\t\t\tbreak;\n\t}\n\tpostMessage({\n\t\tcommand: msg.command,\n\t\tstack: scene.getStack(),\n\t});\n};\n\nconst SceneManager = require('../core/SceneManager.js');\nconst { Box, GridEntity } = require('../entity-system/Entities.js');\nconst { ProcessBoxAsRect, GridPattern } = require('../entity-system/Traits.js');\n\nclass GridBuilder {\n\t/**\n\t * Constructs a scene containing a 2D grid.\n\t * @param {number} cellWidth\n\t * @param {number} cellHeight\n\t * @param {number} gridWidth\n\t * @param {number} gridHeight\n\t * @returns SceneManager\n\t */\n\tstatic buildGrid(cellWidth, cellHeight, gridWidth, gridHeight) {\n\t\tlet scene = new SceneManager();\n\t\tlet grid = new GridEntity(gridWidth, gridHeight, cellWidth, cellHeight);\n\t\tgrid.register(new GridPattern());\n\t\treturn scene.push(grid);\n\t}\n\n\t/**\n\t * Constructs a scene that will simply clear the area.\n\t * @param {number} gridWidth\n\t * @param {number} gridHeight\n\t */\n\tstatic buildClearedArea(gridWidth, gridHeight) {\n\t\tlet scene = new SceneManager();\n\t\tlet area = new Box(0, 0, gridWidth, gridHeight, false);\n\t\tarea.register(new ProcessBoxAsRect()).register(new ClearArea());\n\t\treturn scene.push(area);\n\t}\n\n\t/**\n\t * Creates an empty scene to support the Null object pattern.\n\t */\n\tstatic buildEmptyScene() {\n\t\treturn new SceneManager();\n\t}\n}\n","const handler = {\n\tget: function (obj, prop) {\n\t\treturn prop in obj ? obj[prop] : 'Undefined Command';\n\t},\n};\n\nmodule.exports = new Proxy(\n\t{\n\t\tLifeCycle: new Proxy(\n\t\t\t{\n\t\t\t\tSTART: 'START',\n\t\t\t\tSTOP: 'STOP',\n\t\t\t\tPAUSE: 'PAUSE',\n\t\t\t\tPROCESS_CYCLE: 'PROCESS_CYCLE',\n\t\t\t},\n\t\t\thandler\n\t\t),\n\t\tDrawingSystemCommands: new Proxy(\n\t\t\t{\n\t\t\t\tSET_CELLS: 'SET_CELLS',\n\t\t\t\tSET_CELL_SIZE: 'SET_CELL_SIZE',\n\t\t\t\tSEND_CELLS: 'SEND_CELLS',\n\t\t\t\tRESET: 'RESET',\n\t\t\t\tTOGGLE_CELL: 'TOGGLE_CELL',\n\t\t\t\tDISPLAY_STORAGE: 'DISPLAY_STORAGE',\n\t\t\t\tDRAW_TEMPLATE: 'DRAW_TEMPLATE',\n\t\t\t\tDRAW_LINEAR_ELEMENTRY_CA: 'DRAW_LINEAR_ELEMENTRY_CA',\n\t\t\t},\n\t\t\thandler\n\t\t),\n\t\tLifeSystemCommands: new Proxy(\n\t\t\t{\n\t\t\t\tDISPLAY_STORAGE: 'DISPLAY_STORAGE',\n\t\t\t\tRESET: 'RESET',\n\t\t\t\tSEND_ALIVE_CELLS_COUNT: 'SEND_ALIVE_CELLS_COUNT',\n\t\t\t\tSEND_CELLS: 'SEND_CELLS',\n\t\t\t\tSEND_SIMULATION_ITERATIONS_COUNT: 'SEND_SIMULATION_ITERATIONS_COUNT',\n\t\t\t\tSET_CELL_SIZE: 'SET_CELL_SIZE',\n\t\t\t\tSET_CONFIG: 'SET_CONFIG',\n\t\t\t\tSET_SEEDER: 'SET_SEEDER',\n\t\t\t},\n\t\t\thandler\n\t\t),\n\t},\n\thandler\n);\n","/**\n * Data structure for storing the entities ready to render.\n */\nclass SceneManager {\n\t/**\n\t * Create a new SceneManager\n\t */\n\tconstructor() {\n\t\tthis.stack = [];\n\t}\n\n\t/**\n\t * Add a a single entity or an array of entities to the scene to be rendered.\n\t * @param {Entity | Entity[]} entity\n\t * @return {SceneManager} Returns the instance of the SceneManager.\n\t */\n\tpush(entity) {\n\t\tif (Array.isArray(entity)) {\n\t\t\tthis.stack = this.stack.concat(entity);\n\t\t} else {\n\t\t\tthis.stack.push(entity);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pop the next entity off the scene's stack.\n\t * @returns {Entity} The next entity to render.\n\t */\n\tnextEntity() {\n\t\treturn this.stack.shift();\n\t}\n\n\t/**\n\t * Determine if the stack is empty or not.\n\t * @returns {boolean}\n\t */\n\tfullyRendered() {\n\t\treturn !(this.stack.length > 0);\n\t}\n\n\t/**\n\t * Removes all entities from the stack.\n\t */\n\tclear() {\n\t\tthis.stack = [];\n\t}\n\n\tgetStack() {\n\t\treturn this.stack;\n\t}\n\n\tserializeStack() {\n\t\treturn JSON.stringify(this.stack);\n\t}\n}\n\nmodule.exports = SceneManager;\n","/**\n * Defines the possible states a Cell can have.\n */\nconst CellStates = {\n\tDEAD: 0,\n\tACTIVE: 1,\n\tRETIRED: 2\n};\n\nmodule.exports = CellStates;\n","const { CELL_HEIGHT, CELL_WIDTH } = require('./Entities.js');\n/**\n * Selects a color based on the provided age.\n * @param {number} age\n * @returns {string} color\n */\nfunction fillStyle(age) {\n\tif (typeof age !== 'number') {\n\t\tthrow new Error(\n\t\t\t'The trait ageBasedColor requires a property \"age\" be set to a number.'\n\t\t);\n\t}\n\n\tlet color = null;\n\tswitch (true) {\n\t\tcase age <= 1:\n\t\t\tcolor = '#e3f2fd';\n\t\t\tbreak;\n\t\tcase age == 2:\n\t\t\tcolor = '#bbdefb';\n\t\t\tbreak;\n\t\tcase age == 3:\n\t\t\tcolor = '#90caf9';\n\t\t\tbreak;\n\t\tcase age > 3 && age <= 5:\n\t\t\tcolor = '#64b5f6';\n\t\t\tbreak;\n\t\tcase age > 5 && age <= 8:\n\t\t\tcolor = '#42a5f5';\n\t\t\tbreak;\n\t\tcase age > 8 && age <= 13:\n\t\t\tcolor = '#2196f3';\n\t\t\tbreak;\n\t\tcase age > 13 && age <= 21:\n\t\t\tcolor = '#1e88e5';\n\t\t\tbreak;\n\t\tcase age > 21 && age <= 34:\n\t\t\tcolor = '#1976d2';\n\t\t\tbreak;\n\t\tcase age > 34 && age <= 55:\n\t\t\tcolor = '#1565c0';\n\t\t\tbreak;\n\t\tcase age > 55 && age <= 89:\n\t\t\tcolor = '#0d47a1';\n\t\t\tbreak;\n\t\tcase age > 89 && age <= 144:\n\t\t\tcolor = '#263238'; //Dark Blue Grey\n\t\t\tbreak;\n\t\tcase age > 144 && age <= 233:\n\t\t\tcolor = '#870000'; //Dark Orange\n\t\t\tbreak;\n\t\tcase age > 233 && age <= 377:\n\t\t\tcolor = '#bf360c';\n\t\t\tbreak;\n\t\tcase age > 377:\n\t\t\tcolor = '#ffeb3b'; //Bright Yellow\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Unexpected Age: ${age}`);\n\t}\n\treturn color;\n}\n\nconst TWO_PI = Math.PI * 2;\nconst DEFAULT_CIRCLE_FILL_STYLE = 'rgb(44, 193, 59)';\nconst DEFAULT_CIRCLE_STROKE_STYLE = 'rgb(0, 0, 0)';\n\n/**\n * Abstract class. Defines a render-able trait that can be processed.\n */\nclass Trait {\n\t/**\n\t * Creates a new trait.\n\t */\n\tconstructor() {}\n\t/**\n\t * Function that controls what the trait does.\n\t * @abstract\n\t * @param {object} context - The render context.\n\t */\n\tprocess(context) {\n\t\tthrow new Error('Traits must implement a process method.');\n\t}\n\n\t/**\n\t * Automatically called by JSON.stringify().\n\t * Injects the original class name as a property when serialized\n\t * which an be used to rebuild a Scene after communicated from a thread.\n\t * @returns Trait\n\t */\n\ttoJSON() {\n\t\tthis.className = this.constructor.name;\n\t\treturn this;\n\t}\n}\n\n/**\n * Sets the fill and stroke style by the entity's age.\n */\nclass ColorByAgeTrait extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.fillStyle = fillStyle(context.entity.age);\n\t\tcontext.strokeStyle = 'rgb(0, 0, 0)';\n\t}\n}\n\n/**\n * Creates a new render-able entity in the rendering context.\n */\nclass GridCellToRenderingEntity extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendering = context.rendering || {};\n\t\tcontext.rendering.entity = {};\n\n\t\t//Define Upper Left Corner (X,Y)\n\t\tcontext.rendering.entity.x = context.entity.row;\n\t\tcontext.rendering.entity.y = context.entity.col;\n\n\t\t//Define width & height\n\t\tcontext.rendering.entity.width = CELL_WIDTH;\n\t\tcontext.rendering.entity.height = CELL_HEIGHT;\n\t}\n}\n\n/**\n * Scales a rendering entity by a constant scaling factor.\n */\nclass ScaleTransformer extends Trait {\n\t/**\n\t * Create a new scale transformer.\n\t * @param {number} scalingFactor\n\t */\n\tconstructor(scalingFactor) {\n\t\tsuper();\n\t\tthis.scalingFactor = scalingFactor;\n\t}\n\n\tprocess(context) {\n\t\tif (\n\t\t\ttypeof context.rendering === 'undefined' ||\n\t\t\ttypeof context.rendering.entity === 'undefined'\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'ScaleTransformer attempted to process an entity that did not have context.rendering or context.rendering.entity defined.'\n\t\t\t);\n\t\t}\n\t\tcontext.rendering.entity.x *= this.scalingFactor;\n\t\tcontext.rendering.entity.y *= this.scalingFactor;\n\t\tcontext.rendering.entity.width *= this.scalingFactor;\n\t\tcontext.rendering.entity.height *= this.scalingFactor;\n\t}\n}\n\n/**\n * Draws a filled in circle with a stroke.\n */\nclass CircleTrait extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\t//find center\n\t\t//this.x, this.y, this.width, this.height\n\t\tlet cx = context.rendering.entity.x + context.rendering.entity.width / 2;\n\t\tlet cy = context.rendering.entity.y + context.rendering.entity.height / 2;\n\t\tlet radius = context.rendering.entity.width / 2;\n\n\t\tcontext.rendererContext.fillStyle =\n\t\t\tcontext.fillStyle || DEFAULT_CIRCLE_FILL_STYLE;\n\t\tcontext.rendererContext.strokeStyle =\n\t\t\tcontext.strokeStyle || DEFAULT_CIRCLE_STROKE_STYLE;\n\t\tcontext.rendererContext.beginPath();\n\t\tcontext.rendererContext.arc(cx, cy, radius, 0, TWO_PI, true);\n\t\tcontext.rendererContext.fill();\n\t\tcontext.rendererContext.stroke();\n\t}\n}\n\n/**\n * Creates a new render-able entity.\n */\nclass ProcessBoxAsRect extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendering = context.rendering || {};\n\t\tcontext.rendering.entity = {};\n\t\tcontext.rendering.entity.x = context.entity.x;\n\t\tcontext.rendering.entity.y = context.entity.y;\n\t\tcontext.rendering.entity.width = context.entity.xx - context.entity.x;\n\t\tcontext.rendering.entity.height = context.entity.yy - context.entity.y;\n\t}\n}\n\n/**\n * Defines the stroke style based on if an entity is alive.\n */\nclass ColorByContents extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.lineWidth = 2;\n\t\tcontext.strokeStyle = context.entity.alive ? '#c41c00' : '#0d47a1';\n\t}\n}\n\n/**\n * Defines a dark fill and stroke style.\n */\nclass DarkFillTrait extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.fillStyle = '#263238';\n\t\tcontext.strokeStyle = '#263238';\n\t}\n}\n\n/**\n * Stroke style pass through.\n */\nclass StrokeStyle extends Trait {\n\tconstructor(strokeStyle) {\n\t\tsuper();\n\t\tthis.strokeStyle = strokeStyle;\n\t}\n\n\tprocess(context) {\n\t\tcontext.strokeStyle = this.strokeStyle;\n\t}\n}\n\n/**\n * Fill Style pass through.\n */\nclass FillStyle extends Trait {\n\tconstructor(fillStyle) {\n\t\tsuper();\n\t\tthis.fillStyle = fillStyle;\n\t}\n\n\tprocess(context) {\n\t\tcontext.fillStyle = this.fillStyle;\n\t}\n}\n\n/** Draws a rectangle. */\nclass RectOutlineTrait extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendererContext.strokeStyle =\n\t\t\tcontext.strokeStyle || DEFAULT_CIRCLE_STROKE_STYLE;\n\t\tcontext.rendererContext.strokeRect(\n\t\t\tcontext.rendering.entity.x,\n\t\t\tcontext.rendering.entity.y,\n\t\t\tcontext.rendering.entity.width,\n\t\t\tcontext.rendering.entity.height\n\t\t);\n\t}\n}\n\n/**\n * Fills a rectangle.\n */\nclass FilledRectTrait extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendererContext.fillStyle =\n\t\t\tcontext.fillStyle || DEFAULT_CIRCLE_FILL_STYLE;\n\t\tcontext.rendererContext.fillRect(\n\t\t\tcontext.rendering.entity.x,\n\t\t\tcontext.rendering.entity.y,\n\t\t\tcontext.rendering.entity.width,\n\t\t\tcontext.rendering.entity.height\n\t\t);\n\t}\n}\n\n/**\n * Sets the stroke style to a thin, dark line.\n */\nclass DarkThinLines extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendererContext.strokeStyle = '#757575';\n\t\tcontext.rendererContext.lineWidth = 0.5;\n\t}\n}\n\n/**\n * Draws a grid.\n */\nclass GridPattern extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\t//Draw vertical lines\n\t\tcontext.rendererContext.beginPath();\n\t\tfor (let x = 0; x < context.entity.width; x += context.entity.cell.width) {\n\t\t\tcontext.rendererContext.moveTo(x, 0);\n\t\t\tcontext.rendererContext.lineTo(x, context.entity.height);\n\t\t}\n\n\t\t//Draw horizontal lines\n\t\tfor (\n\t\t\tlet y = 0;\n\t\t\ty < context.entity.height;\n\t\t\ty += context.entity.cell.height\n\t\t) {\n\t\t\tcontext.rendererContext.moveTo(0, y);\n\t\t\tcontext.rendererContext.lineTo(context.entity.width, y);\n\t\t}\n\n\t\t//Render all lines at once.\n\t\tcontext.rendererContext.stroke();\n\t}\n}\n\nclass BatchDrawingCells extends Trait {\n\tconstructor(scalingFactor, strokeThreashold, shape) {\n\t\tsuper();\n\t\tthis.scalingFactor = scalingFactor;\n\t\tthis.strokeThreashold = strokeThreashold;\n\t\tthis.shape = shape;\n\t}\n\n\tprocess(context) {\n\t\tswitch (this.shape) {\n\t\t\tcase 'circle':\n\t\t\t\tthis.drawCircles(context);\n\t\t\t\tbreak;\n\t\t\tcase 'square':\n\t\t\t\tthis.drawSquares(context);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unsupported shape: ' + this.shape);\n\t\t}\n\t}\n\n\tdrawSquares(context) {\n\t\tlet cell;\n\t\tcontext.rendererContext.beginPath();\n\t\tfor (let index = 0; index < context.entity.entities.length; index++) {\n\t\t\tcell = context.entity.entities[index];\n\t\t\t//scale and add a rect to the path.\n\t\t\tif (cell) {\n\t\t\t\tcontext.rendererContext.rect(\n\t\t\t\t\tcell.row * this.scalingFactor,\n\t\t\t\t\tcell.col * this.scalingFactor,\n\t\t\t\t\tCELL_WIDTH * this.scalingFactor,\n\t\t\t\t\tCELL_HEIGHT * this.scalingFactor\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\tcontext.rendererContext.fill();\n\n\t\t//Drawing strokes takes time. Only do it for when we're zoomed out.\n\t\tif (this.scalingFactor > this.strokeThreashold) {\n\t\t\tcontext.rendererContext.stroke();\n\t\t}\n\t}\n\n\t//Note: It's more expensive to draw circles than rectangles.\n\tdrawCircles(context) {\n\t\tlet radius = this.scalingFactor / 2;\n\t\tlet cell;\n\t\tcontext.rendererContext.beginPath();\n\t\tfor (let index = 0; index < context.entity.entities.length; index++) {\n\t\t\tcell = context.entity.entities[index];\n\t\t\tif (cell) {\n\t\t\t\tlet cx = cell.row * this.scalingFactor + radius;\n\t\t\t\tlet cy = cell.col * this.scalingFactor + radius;\n\t\t\t\tcontext.rendererContext.moveTo(cx + radius, cy);\n\t\t\t\tcontext.rendererContext.arc(cx, cy, radius, 0, TWO_PI, true);\n\t\t\t}\n\t\t}\n\t\tcontext.rendererContext.fill();\n\t\tif (this.scalingFactor > this.strokeThreashold) {\n\t\t\tcontext.rendererContext.stroke();\n\t\t}\n\t}\n}\n\nconst missingStateHandler = {\n\tget: function (obj, prop) {\n\t\treturn prop in obj ? obj[prop] : '#f52811'; //Redish\n\t},\n};\n\nclass MapWithDefault extends Map {\n\tconstructor(defaultValue, entries) {\n\t\tsuper(entries);\n\t\tthis.defaultValue = defaultValue;\n\t}\n\n\t/**\n\t * Overrides get(key) to provide a default value.\n\t * @param {*} key\n\t * @override\n\t */\n\tget(key) {\n\t\treturn this.has(key) ? super.get(key) : this.defaultValue;\n\t}\n}\n\nclass BatchDrawingCellsFromBuffer extends Trait {\n\tconstructor(scalingFactor, strokeThreashold, shape) {\n\t\tsuper();\n\t\tthis.scalingFactor = scalingFactor;\n\t\tthis.strokeThreashold = strokeThreashold;\n\t\tthis.shape = shape;\n\n\t\t//TODO: Refactor\n\t\t//Only changing colors on the fib seq numbers.\n\t\tthis.colors = new MapWithDefault('#f52811'); //Default Red-ish\n\t\tthis.colors.set(1, '#263238'); //Active\n\t\tthis.colors.set(2, '#77a1b5'); //Begin Aging\n\t\tthis.colors.set(3, '#a8e4ff'); //Fib Change\n\t\tthis.colors.set(4, '#a8e4ff');\n\t\tthis.colors.set(5, '#a8fff3'); //Fib Change\n\t\tthis.colors.set(6, '#a8fff3');\n\t\tthis.colors.set(7, '#a8fff3');\n\t\tthis.colors.set(8, '#a8ffaf'); //Fib Change\n\t\tthis.colors.set(9, '#a8ffaf');\n\t\tthis.colors.set(10, '#a8ffaf');\n\t\tthis.colors.set(11, '#a8ffaf');\n\t\tthis.colors.set(12, '#a8ffaf');\n\t\tthis.colors.set(13, '#feffa8'); //Fib Change\n\t\tthis.colors.set(14, '#feffa8');\n\t\tthis.colors.set(15, '#feffa8');\n\t\tthis.colors.set(16, '#feffa8');\n\t\tthis.colors.set(17, '#feffa8');\n\t\tthis.colors.set(18, '#feffa8');\n\t\tthis.colors.set(19, '#feffa8');\n\t\tthis.colors.set(20, '#feffa8');\n\t\tthis.colors.set(21, '#ffa8a8'); //Fib Change\n\t}\n\n\tprocess(context) {\n\t\tlet row, col, state;\n\t\tcontext.rendererContext.beginPath();\n\n\t\tlet firstState = context.entity.initialOffset + 2;\n\t\tlet currentState = context.entity.buffer[firstState];\n\t\tcontext.rendererContext.fillStyle = this.colors.get(currentState);\n\n\t\tfor (\n\t\t\tlet index = context.entity.initialOffset;\n\t\t\tindex < context.entity.bufferEnd;\n\t\t\tindex += context.entity.entityFieldsCount\n\t\t) {\n\t\t\trow = context.entity.buffer[index];\n\t\t\tcol = context.entity.buffer[index + 1];\n\t\t\tstate = context.entity.buffer[index + 2];\n\n\t\t\tif (currentState != state) {\n\t\t\t\tcontext.rendererContext.fill(); //Render the existing\n\t\t\t\tcontext.rendererContext.beginPath();\n\t\t\t\tcurrentState = state;\n\t\t\t\tcontext.rendererContext.fillStyle = this.colors.get(currentState);\n\t\t\t}\n\n\t\t\t//scale and add a rect to the path.\n\t\t\tcontext.rendererContext.rect(\n\t\t\t\trow * this.scalingFactor,\n\t\t\t\tcol * this.scalingFactor,\n\t\t\t\tCELL_WIDTH * this.scalingFactor,\n\t\t\t\tCELL_HEIGHT * this.scalingFactor\n\t\t\t);\n\t\t}\n\t\tcontext.rendererContext.fill();\n\t}\n}\n\nclass BatchDrawingBoxesFromBuffer extends Trait {\n\tconstructor(scalingFactor) {\n\t\tsuper();\n\t\tthis.scalingFactor = scalingFactor;\n\t}\n\n\tprocess(context) {\n\t\tlet x, y, xx, yy;\n\t\tcontext.rendererContext.beginPath();\n\t\tfor (\n\t\t\tlet index = context.entity.initialOffset;\n\t\t\tindex < context.entity.bufferEnd;\n\t\t\tindex += context.entity.entityFieldsCount\n\t\t) {\n\t\t\tx = context.entity.buffer[index] * this.scalingFactor;\n\t\t\ty = context.entity.buffer[index + 1] * this.scalingFactor;\n\t\t\txx = context.entity.buffer[index + 2] * this.scalingFactor;\n\t\t\tyy = context.entity.buffer[index + 3] * this.scalingFactor;\n\t\t\tcontext.rendererContext.rect(x, y, xx - x, yy - y);\n\t\t}\n\t\tcontext.rendererContext.stroke();\n\t}\n}\n\nclass BatchDrawingBoxes extends Trait {\n\tconstructor(scalingFactor) {\n\t\tsuper();\n\t\tthis.scalingFactor = scalingFactor;\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendererContext.beginPath();\n\t\tlet box;\n\t\tfor (let index = 0; index < context.entity.entities.length; index++) {\n\t\t\tbox = context.entity.entities[index];\n\t\t\tcontext.rendererContext.rect(\n\t\t\t\tbox.x * this.scalingFactor,\n\t\t\t\tbox.y * this.scalingFactor,\n\t\t\t\t(box.xx - box.x) * this.scalingFactor,\n\t\t\t\t(box.yy - box.y) * this.scalingFactor\n\t\t\t);\n\t\t}\n\t\tcontext.rendererContext.stroke();\n\t}\n}\n\nclass OutlineStyle extends Trait {\n\tconstructor(lineWidth, strokeStyle) {\n\t\tsuper();\n\t\tthis.lineWidth = lineWidth;\n\t\tthis.strokeStyle = strokeStyle;\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendererContext.lineWidth = this.lineWidth;\n\t\tcontext.rendererContext.strokeStyle = this.strokeStyle;\n\t}\n}\n\n/**\n * Clears an area of a context defined by x,y, width, height.\n */\nclass ClearArea extends Trait {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tprocess(context) {\n\t\tcontext.rendererContext.clearRect(\n\t\t\tcontext.rendering.entity.x,\n\t\t\tcontext.rendering.entity.y,\n\t\t\tcontext.rendering.entity.width,\n\t\t\tcontext.rendering.entity.height\n\t\t);\n\t}\n}\n\nmodule.exports = {\n\tBatchDrawingBoxes,\n\tBatchDrawingBoxesFromBuffer,\n\tBatchDrawingCells,\n\tBatchDrawingCellsFromBuffer,\n\tCircleTrait,\n\tClearArea,\n\tColorByAgeTrait,\n\tColorByContents,\n\tDarkFillTrait,\n\tDarkThinLines,\n\tFilledRectTrait,\n\tFillStyle,\n\tGridCellToRenderingEntity,\n\tGridPattern,\n\tOutlineStyle,\n\tProcessBoxAsRect,\n\tRectOutlineTrait,\n\tScaleTransformer,\n\tStrokeStyle,\n\tTrait,\n};\n"],"sourceRoot":""}